package com.project.jwtexample.util;

import java.util.Date;

import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties.Jwt;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.rsocket.RSocketSecurity.JwtSpec;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

@Configuration
public class JWTUtility {
	
	
	private String seceretKey = "mwqon2^&^%xakjJSN@&(&)";
	
	// Generate Token
	private String generateToken(String username)
	{
		return Jwts.builder()
				.setSubject(username)
				     .setIssuedAt(new Date())
				         .setExpiration(new Date(System.currentTimeMillis() + 100 * 60 * 60 * 1))
				             .signWith(SignatureAlgorithm.HS256,seceretKey)
				             .compact();
	}
	
	// Validate Token
	public boolean validToken(String token, String username)
	{
		return username.equals(extractUsername(token)) && !isTokenExpired(token);
	}
	
    // Extract Username from Token
	public String extractUsername(String token)
	{
		return extractClaims(token).getSubject();
	}

	// Extract claims from token
	public Claims extractClaims(String token) {
		
		return Jwts.parser()
				.setSigningKey(seceretKey)
				.parseClaimsJwt(token)
				.getBody();	
	}
	
	// Check if token Expired
	private boolean isTokenExpired(String token) {
		 return extractClaims(token).getExpiration().before(new Date());
	}
}
